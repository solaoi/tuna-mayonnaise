// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", (err) => {
  throw err;
});

// Ensure environment variables are read.
require("../config/env");

const chalk = require("react-dev-utils/chalk");
const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const clearConsole = require("react-dev-utils/clearConsole");
const checkRequiredFiles = require("react-dev-utils/checkRequiredFiles");
const {
  choosePort,
  createCompiler,
  prepareUrls,
} = require("react-dev-utils/WebpackDevServerUtils");
const openBrowser = require("react-dev-utils/openBrowser");
// We require that you explicitly set browsers and do not fall back to
// browserslist defaults.
const { checkBrowsers } = require("react-dev-utils/browsersHelper");
const paths = require("../config/paths");
const configFactory = require("../config/webpack.config");
const createDevServerConfig = require("../config/webpackDevServer.config");

const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || "0.0.0.0";

if (process.env.HOST) {
  // eslint-disable-next-line no-console
  console.log(
    chalk.cyan(
      `Attempting to bind to HOST environment variable: ${chalk.yellow(
        chalk.bold(process.env.HOST)
      )}`
    )
  );
  // eslint-disable-next-line no-console
  console.log(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`
  );
  // eslint-disable-next-line no-console
  console.log(
    `Learn more here: ${chalk.yellow("https://cra.link/advanced-config")}`
  );
  // eslint-disable-next-line no-console
  console.log();
}

checkBrowsers(paths.appPath, isInteractive)
  .then(() =>
    // We attempt to use the default port but if it is busy, we offer the user to
    // run on a different port. `choosePort()` Promise resolves to the next free port.
    choosePort(HOST, DEFAULT_PORT)
  )
  .then((port) => {
    if (port == null) {
      // We have not found a port.
      return;
    }

    const config = configFactory("development");
    const protocol = process.env.HTTPS === "true" ? "https" : "http";
    // eslint-disable-next-line import/no-dynamic-require, global-require
    const appName = require(paths.appPackageJson).name;

    const urls = prepareUrls(
      protocol,
      HOST,
      port,
      paths.publicUrlOrPath.slice(0, -1)
    );
    const devSocket = {
      warnings: (warnings) =>
        // eslint-disable-next-line no-use-before-define
        devServer.sendMessage(devServer.sockets, "warnings", warnings),
      errors: (errors) =>
        // eslint-disable-next-line no-use-before-define
        devServer.sendMessage(devServer.sockets, "errors", errors),
    };
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler({
      appName,
      config,
      devSocket,
      urls,
      webpack,
    });
    // Serve webpack assets generated by the compiler over a web server.
    const serverConfig = createDevServerConfig(urls.lanUrlForConfig);
    const devServer = new WebpackDevServer(
      { ...serverConfig, host: HOST, port },
      compiler
    );
    // Launch WebpackDevServer.
    devServer.startCallback(() => {
      if (isInteractive) {
        clearConsole();
      }

      // eslint-disable-next-line no-console
      console.log(chalk.cyan("Starting the development server...\n"));
      return openBrowser(urls.localUrlForBrowser);
    });

    ["SIGINT", "SIGTERM"].forEach((sig) => {
      process.on(sig, () => {
        devServer.stopCallback(() => {
          // eslint-disable-next-line no-console
          console.log("Closed");
        });
        process.exit();
      });
    });

    if (process.env.CI !== "true") {
      // Gracefully exit when stdin ends
      process.stdin.on("end", () => {
        devServer.stopCallback(() => {
          // eslint-disable-next-line no-console
          console.log("Closed");
        });
        process.exit();
      });
    }
  })
  .catch((err) => {
    if (err && err.message) {
      // eslint-disable-next-line no-console
      console.log(err.message);
    }
    process.exit(1);
  });
